#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('gameproject:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



var pool = require("../models/connection");
process.once('SIGTERM', end);
function end() {
  server.close(function (err) {
    if (err) throw err;
    console.log('Server endded!'); 
    pool.end(function (err) {
      if (err) throw err; 
      process.exit();
    });
  });
}

app.get('/battle_states', async function( req, res) {
  console.log('helo')
  let sql = 'select * from battle_states'
  let result = await pool.query(sql)
    try{
      console.log(result.rows);
      res.status(200).send(result.rows);
    } catch(err) {
      console.log(err);
      res.status(500).send(err);
    }
  })

  app.get('/deck', async function( req, res) {
    console.log('helo')
    let sql = 'select * from deck where deck_player_id = 1'
    let result = await pool.query(sql)
      try{
        console.log(result.rows);
        res.status(200).send(result.rows);
      } catch(err) {
        console.log(err);
        res.status(500).send(err);
      }
      /* let card_id = result.row[0].deck_card_id
      print(card_id) */
    })

    
  app.get('/player_info', async function( req, res) {
    console.log('helo')
    let sql = 'select * from player'
    let result = await pool.query(sql)
      try{
        console.log(result.rows);
        res.status(200).send(result.rows);
      } catch(err) {
        console.log(err);
        res.status(500).send(err);
      }
    })

    app.get('/player_tile', async function( req, res) {
      console.log('helo')
      let sql = 'select room_player1_id , room_player2_id , room_player1_tile_id , room_player2_tile_id from room , player where room_id = player_room_id and player_id = 1 '
      let result = await pool.query(sql)
        try{
          console.log(result.rows);
          res.status(200).send(result.rows);
        } catch(err) {
          console.log(err);
          res.status(500).send(err);
        }
      })

      app.get('/round_num', async function( req, res) {
        console.log('helo')
        let sql = 'select battle_round from battle where battle_id = 1'
        let result = await pool.query(sql)
          try{
            console.log(result.rows);
            res.status(200).send(result.rows);
          } catch(err) {
            console.log(err);
            res.status(500).send(err);
          }
        })

        async function round() {
          app.get('/round_num', async function( req, res) {
            console.log('helo')
            let sql = 'select battle_round from battle where battle_id = 1'
            let result = await pool.query(sql)
              try{
                console.log(result.rows);
                res.status(200).send(result.rows);
              } catch(err) {
                console.log(err);
                res.status(500).send(err);
              }
            })
        }